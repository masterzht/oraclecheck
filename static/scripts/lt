
if [ "$1" = "dg_info" -o "$1" = "dg" ]; then

  ltsql -p $2 -x -c"
   SELECT application_name                            AS appname,
        usename,
        coalesce(client_addr::TEXT, 'localhost')    AS address,
        pid::TEXT,
        client_port,
        CASE state
            WHEN 'streaming' THEN 0
            WHEN 'startup' THEN 1
            WHEN 'catchup' THEN 2
            WHEN 'backup' THEN 3
            WHEN 'stopping' THEN 4
            ELSE -1 END                             AS state,
        CASE sync_state
            WHEN 'async' THEN 0
            WHEN 'potential' THEN 1
            WHEN 'sync' THEN 2
            WHEN 'quorum' THEN 3
            ELSE -1 END                             AS sync_state,
        sync_priority,
        backend_xmin::TEXT::BIGINT                  AS backend_xmin,
        current.lsn - '0/0'                         AS lsn,
        current.lsn - sent_lsn                      AS sent_diff,
        current.lsn - write_lsn                     AS write_diff,
        current.lsn - flush_lsn                     AS flush_diff,
        current.lsn - replay_lsn                    AS replay_diff,
        sent_lsn - '0/0'                            AS sent_lsn,
        write_lsn - '0/0'                           AS write_lsn,
        flush_lsn - '0/0'                           AS flush_lsn,
        replay_lsn - '0/0'                          AS replay_lsn,
        coalesce(extract(EPOCH FROM write_lag), 0)  AS write_lag,
        coalesce(extract(EPOCH FROM flush_lag), 0)  AS flush_lag,
        coalesce(extract(EPOCH FROM replay_lag), 0) AS replay_lag,
        extract(EPOCH FROM current_timestamp)       AS 'time',
        extract(EPOCH FROM backend_start)           AS launch_time,
        extract(EPOCH FROM reply_time)              AS reply_time
 FROM pg_stat_replication,
      (SELECT CASE WHEN pg_is_in_recovery() THEN pg_last_wal_replay_lsn() ELSE pg_current_wal_lsn() END AS lsn) current;
      select * from pg_settings where name ='synchronous_commit';
  "
fi


######################################
if [ "$1" = "get_ddl" -o "$1" = "ddl" ]; then

  if [ "$2" = "" ]; then
    echo "ora get_ddl <port> <object_name>"
    exit 1
  fi
  object_name=$2
 ltsql -p $2 -Ulightdb -x -c "
 SELECT c.oid,
       (select rolname from pg_authid auth where auth.oid = c.relowner)            as username,
       (select tbs.spcname from pg_tablespace tbs where tbs.oid = c.reltablespace) as tablesapce_name,
       (select n.nspname from pg_catalog.pg_namespace n where n.oid = c.relnamespace) || '.' ||
       c.relname                                                                   as object_name,
       c.relfilenode                                                               as object_oid,
       pg_catalog.pg_relation_filepath(c.oid)                                      as object_location,
       pg_catalog.pg_relation_filepath(c.reltoastrelid)                            as toast_object_location,
       pg_catalog.pg_size_pretty(pg_catalog.pg_table_size(c.oid))                  as object_size,
       CASE c.relkind
           WHEN 'r' THEN 'table'
           WHEN 'v' THEN 'view'
           WHEN 'm' THEN 'materialized view'
           WHEN 'i' THEN 'index'
           WHEN 'S' THEN 'sequence'
           WHEN 's' THEN 'special'
           WHEN 'f' THEN 'foreign table'
           WHEN 'p' THEN 'partitioned table'
           WHEN 'I'
               THEN 'partitioned index' END                                        as object_type,
       (select am.amname from pg_am am where am.oid = c.relam)                     as object_access_method,
       CASE c.relpersistence
           WHEN 'p' THEN 'permanent'
           WHEN 't' THEN 'temporary'
           WHEN 'u'
               THEN 'unlogged' END                                                 as temp_or_nologging,
       (select type.typname from pg_type type where type.oid = c.reltype)          as typname
FROM pg_catalog.pg_class c
WHERE pg_catalog.pg_table_is_visible(c.oid) and c.relname = '$3'
ORDER BY 1, 2;
 "
 ## lt_dump -Fp -s -t '$2' -dem -p5432 -f .  $2.sql -v
